name: Plan Infrastructure

on:
  workflow_call:
    secrets:
      aws_region:
        required: true
        description: 'AWS region for deployment'
      aws_primary_role_arn:
        required: true
        description: 'Primary OIDC role ARN to assume'
      aws_target_role_arn:
        required: true
        description: 'Target role ARN to assume for deployments'

permissions:
  id-token: write # Required for OIDC authentication
  contents: read

jobs:
  planning:
    name: 'Plan'
    runs-on: ubuntu-latest
    steps:
      - name: Download Terraform Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-files
          path: artifact-files

      - name: Get Artifact Files
        run: |
          pwd
          ls -a artifact-files
          echo "Copy Terraform artifact"
          cp -f artifact-files/*.zip .
          echo "After Copy"
          unzip -o terraform_artifact.zip
          echo "see files"
          ls -a

      - name: Configure AWS credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws_primary_role_arn }}
          aws-region: ${{ secrets.aws_region }}
          
      - name: Assume Target Role
        id: assume-role
        run: |
          # Assume the target role using AWS STS and store the credentials
          creds=$(aws sts assume-role \
            --role-arn ${{ secrets.aws_target_role_arn }} \
            --role-session-name GitHubActionsSession \
            --query "Credentials" \
            --output json)
            
          # Set AWS credentials as environment variables for Terraform
          echo "AWS_ACCESS_KEY_ID=$(echo $creds | jq -r .AccessKeyId)" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $creds | jq -r .SecretAccessKey)" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $creds | jq -r .SessionToken)" >> $GITHUB_ENV
          
          # Verify role assumption worked
          aws sts get-caller-identity
          
      - name: Configure Terraform Logs
        run: |
          echo "export TF_LOG=debug" >> ~/.bashrc
          source ~/.bashrc

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.7'
          terraform_wrapper: false
          
      - name: Terraform Init
        run: terraform init -backend-config=backend.hcl
        
      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Empaquetar terraform plan
        run: zip -r terraform_plan.zip . -x "artifact-files/*" -x "terraform_artifact.*" -x ".terraform/*"
        
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: |
            terraform_plan.*
            !.terraform/*
            !artifact-files/*
            !terraform_artifact
          retention-days: 5