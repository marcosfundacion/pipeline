name: Prerequisites Workflow (Simplified)

# Define este workflow como reutilizable
on:
  workflow_call:
    # No necesita inputs

jobs:
  prerequisites:
    name: 'Prerequisites (CI)'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        run: |
          # Clonar el repositorio manualmente
          git clone https://github.com/${{ github.repository }}.git .
          git checkout ${{ github.ref }}
      
      # Instalar Terraform sin usar la acci贸n
      - name: Setup Terraform
        run: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common curl
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install terraform

      - name: Terraform Init
        run: terraform init

      - name: Update Terraform Variables
        run: |
          pwd
          echo "See files"
          ls -a
          if [[ ${{ github.ref_name }} = "prod" ]]
          then
              echo "Using prod variables"
              cp ./environments/prod/terraform.tfvars terraform.tfvars
          elif [[ ${{ github.ref_name }} = "qa" ]]
          then
              echo "Using QA variables"
              cp ./environments/qa/terraform.tfvars terraform.tfvars
          elif [[ ${{ github.ref_name }} = "dev" ]]
          then
              echo "Using DEV variables"
              cp ./environments/dev/terraform.tfvars terraform.tfvars
          elif [[ ${{ github.ref_name }} = "dr" ]]
          then
              echo "Using DR variables"
              cp ./environments/dr/terraform.tfvars terraform.tfvars
          fi
          zip -r terraform_artifact.zip . -x "environments/*" -x ".git/*" -x ".github/*"

      # Instalar Python sin usar la acci贸n
      - name: Setup Python
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip
          python3 --version

      - name: Install Checkov
        run: pip3 install checkov

      - name: Create Checkov Report Folder
        run: mkdir -p checkov_report

      - name: Run Checkov
        run: |
          checkov -o junitxml --framework terraform --skip-check CKV_AWS_LOW --download-external-modules true -d ./ -s > ./checkov_report/checkov.xml
          checkov -o json --framework terraform --download-external-modules true --skip-check CKV_AWS_LOW -d ./ -s

      # En lugar de upload-artifact, creamos un archivo en un lugar conocido
      - name: Create artifact manifest
        run: |
          # Guardar informaci贸n de la ejecuci贸n para otros jobs
          echo "${{ github.run_id }}" > tf_run_id.txt
          # Copiar artefactos a un directorio compartido
          mkdir -p /tmp/github_artifacts
          cp -r . /tmp/github_artifacts/
          echo "Artifacts stored in /tmp/github_artifacts"