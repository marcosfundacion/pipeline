name: "Terraform Init Reusable Workflow"

on:
  workflow_call:
    inputs:
      aws_region:
        description: 'AWS Region to deploy resources'
        required: true
        type: string
      terraform_version:
        description: 'Terraform version to use'
        required: false
        default: '1.5.7'
        type: string
      backend_s3_bucket:
        description: 'S3 bucket for Terraform state'
        required: true
        type: string
      backend_key_prefix:
        description: 'Key prefix for Terraform state file'
        required: true
        type: string
    secrets:
      OIDC_ROLE_ARN:
        description: 'ARN of the OIDC IAM Role'
        required: true
      TARGET_ROLE_ARN:
        description: 'ARN of the Target IAM Role to assume'
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  terraform-init:
    name: "Terraform Init"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Configure AWS Credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.OIDC_ROLE_ARN }}
          aws-region: ${{ inputs.aws_region }}

      - name: Assume Target Role
        run: |
          # Assume the target role and store credentials
          CREDS=$(aws sts assume-role --role-arn ${{ secrets.TARGET_ROLE_ARN }} --role-session-name terraform-deployment)
          
          # Export the credentials for use in subsequent steps
          echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

      - name: Update Terraform Variables
        shell: bash
        run: |
          pwd
          echo "See files"
          ls -a
          
          if [[ ${{ github.ref_name }} = "prod" ]]
          then
              echo "Using prod variables"
              cp environments/prod/terraform.tfvars terraform.tfvars
          elif [[ ${{ github.ref_name }} = "qa" ]]
          then
              echo "Using QA variables"
              cp environments/qa/terraform.tfvars terraform.tfvars
          elif [[ ${{ github.ref_name }} = "dev" ]]
          then
              echo "Using DEV variables"
              cp environments/dev/terraform.tfvars terraform.tfvars
          elif [[ ${{ github.ref_name }} = "dr" ]]
          then
              echo "Using DR variables"
              cp environments/dr/terraform.tfvars terraform.tfvars
          fi

      - name: Configure Terraform Backend
        run: |
          cat > backend.tf << EOL
          terraform {
            backend "s3" {
              bucket         = "${{ inputs.backend_s3_bucket }}"
              key            = "${{ inputs.backend_key_prefix }}/${{ github.ref_name }}.tfstate"
              region         = "${{ inputs.aws_region }}"
              encrypt        = true
            }
          }
          EOL

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Create Artifact
        run: |
          # Create zip file with relevant Terraform files, excluding unnecessary directories
          zip -r terraform_artifact.zip . -x "environments/*" -x ".git/*" -x ".github/*"

      - name: Upload Terraform Artifact
        uses: actions/upload-artifact@v3
        with:
          name: terraform-artifacts
          path: terraform_artifact.zip
          retention-days: 5