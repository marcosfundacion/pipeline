name: Prerequisites

on:
  workflow_call:
    inputs:
      branch_name:
        required: true
        type: string
        description: 'Branch name for environment selection (prod, qa, dev, dr)'
      tf_backend_bucket:
        required: true
        type: string
        description: 'S3 bucket for Terraform state'
      tf_backend_key:
        required: true
        type: string
        description: 'S3 key for Terraform state'
      tf_backend_dynamodb_table:
        required: true
        type: string
        description: 'DynamoDB table for Terraform state locking'
    secrets:
      aws_region:
        required: true
        description: 'AWS region for deployment'
      aws_primary_role_arn:
        required: true
        description: 'Primary OIDC role ARN to assume'
      aws_target_role_arn:
        required: true
        description: 'Target role ARN to assume for deployments'

permissions:
  id-token: write # Required for OIDC authentication
  contents: read

jobs:
  prerequisites:
    name: 'Prerequisites'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws_primary_role_arn }}
          aws-region: ${{ secrets.aws_region }}
          
      - name: Assume Target Role
        id: assume-role
        run: |
          # Assume the target role using AWS STS and store the credentials
          creds=$(aws sts assume-role \
            --role-arn ${{ secrets.aws_target_role_arn }} \
            --role-session-name GitHubActionsSession \
            --query "Credentials" \
            --output json)
            
          # Set AWS credentials as environment variables for Terraform
          echo "AWS_ACCESS_KEY_ID=$(echo $creds | jq -r .AccessKeyId)" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $creds | jq -r .SecretAccessKey)" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $creds | jq -r .SessionToken)" >> $GITHUB_ENV
          
          # Verify role assumption worked
          aws sts get-caller-identity

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.7'
          terraform_wrapper: false

      - name: Configure Terraform Backend
        run: |
          echo "Configuring Terraform backend..."
          echo "bucket = \"${{ inputs.tf_backend_bucket }}\"" > backend.hcl
          echo "key = \"${{ inputs.tf_backend_key }}\"" >> backend.hcl
          echo "dynamodb_table = \"${{ inputs.tf_backend_dynamodb_table }}\"" >> backend.hcl
          echo "encrypt = true" >> backend.hcl
          
          cat backend.hcl

      - name: Terraform Init with Backend Config
        run: |
          echo "Initializing Terraform..."
          terraform init -backend-config=backend.hcl
        
      - name: Update terraform vars
        run: |
          pwd
          echo "See files"
          ls -a
          if [[ "${{ inputs.branch_name }}" == "prod" ]]; then
            echo "Using prod variables"
            cp ./environments/prod/terraform.tfvars terraform.tfvars
          elif [[ "${{ inputs.branch_name }}" == "qa" ]]; then
            echo "Using QA variables"
            cp ./environments/qa/terraform.tfvars terraform.tfvars
          elif [[ "${{ inputs.branch_name }}" == "dev" ]]; then
            echo "Using DEV variables"
            cp ./environments/dev/terraform.tfvars terraform.tfvars
          elif [[ "${{ inputs.branch_name }}" == "dr" ]]; then
            echo "Using DR variables"
            cp ./environments/dr/terraform.tfvars terraform.tfvars
          fi
          zip -r terraform_artifact.zip . -x "environments/*" -x ".git/*"
          
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install checkov
        run: pip3 install checkov
        
      - name: Create checkov report folder
        run: mkdir checkov_report
        
      - name: Run checkov
        run: |
          checkov -o junitxml --framework terraform --skip-check CKV_AWS_LOW --download-external-modules true -d ./ -s > ./checkov_report/checkov.xml
          checkov -o json --framework terraform --download-external-modules true --skip-check CKV_AWS_LOW -d ./ -s
        
      - name: Upload Checkov Report
        uses: actions/upload-artifact@v4
        with:
          name: checkov_report
          path: checkov_report
          retention-days: 5
        if: always()
             
      - name: Upload Terraform files
        uses: actions/upload-artifact@v4
        with:
          name: terraform-files
          path: |
            .
            .terraform/**
            !environments/
            !.git/
            !build
          retention-days: 5