name: Reusable Terraform Deploy

on:
  workflow_call:
    inputs:
      working-directory:
        description: 'Directory where Terraform files are located'
        required: false
        type: string
        default: '.'
      terraform-version:
        description: 'Version of Terraform to use'
        required: false
        type: string
        default: '1.3.0'
      aws-region:
        description: 'AWS Region to deploy to'
        required: false
        type: string
        default: 'us-east-1'
      principal-role-arn:
        description: 'ARN of the principal role to assume with OIDC'
        required: true
        type: string
      target-role-arn:
        description: 'ARN of the target role to assume for deployment'
        required: true
        type: string
      environment:
        description: 'Environment (dev, staging, prod)'
        required: false
        type: string
        default: 'dev'
      var-file-path:
        description: 'Path to the Terraform variables file'
        required: false
        type: string
        default: 'environments/dev/terraform.tfvars'

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: Terraform Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform-version }}
          
      - name: Configure AWS credentials (Principal Role)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ inputs.principal-role-arn }}
          aws-region: ${{ inputs.aws-region }}
          
      - name: Terraform Init
        working-directory: ${{ inputs.working-directory }}
        run: terraform init
          
      - name: Assume Target Role
        id: assume-target-role
        run: |
          CREDENTIALS=$(aws sts assume-role \
            --role-arn "${{ inputs.target-role-arn }}" \
            --role-session-name "TerraformDeploySession" \
            --duration-seconds 3600)
            
          echo "aws_access_key_id=$(echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_OUTPUT
          echo "aws_secret_access_key=$(echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_OUTPUT
          echo "aws_session_token=$(echo $CREDENTIALS | jq -r '.Credentials.SessionToken')" >> $GITHUB_OUTPUT
        
      - name: Terraform Plan
        working-directory: ${{ inputs.working-directory }}
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.assume-target-role.outputs.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.assume-target-role.outputs.aws_secret_access_key }}
          AWS_SESSION_TOKEN: ${{ steps.assume-target-role.outputs.aws_session_token }}
        run: terraform plan -var-file=${{ inputs.var-file-path }} -out=tfplan
        
      
      - name: Terraform Apply
        working-directory: ${{ inputs.working-directory }}
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.assume-target-role.outputs.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.assume-target-role.outputs.aws_secret_access_key }}
          AWS_SESSION_TOKEN: ${{ steps.assume-target-role.outputs.aws_session_token }}
        run: terraform apply -auto-approve tfplan
